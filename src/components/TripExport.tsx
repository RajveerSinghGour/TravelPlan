import { Download, FileText, Calendar as CalendarIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { motion } from "framer-motion";

interface Activity {
  id: string;
  name: string;
  category: string;
  duration: string;
  time: string;
  destination: string;
}

interface TripExportProps {
  tripName: string;
  activities: Record<number, Activity[]>;
  tripDays: number[];
  destinations: string[];
}

const TripExport = ({ tripName, activities, tripDays, destinations }: TripExportProps) => {
  
  const exportToPDF = () => {
    // Create a simple text-based "PDF" (actually a formatted text file)
    const content = generateTripText();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${tripName.replace(/[^a-z0-9]/gi, '_')}_itinerary.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const exportToCalendar = () => {
    // Generate ICS format for calendar import
    const icsContent = generateICSContent();
    const blob = new Blob([icsContent], { type: 'text/calendar' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${tripName.replace(/[^a-z0-9]/gi, '_')}_calendar.ics`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generateTripText = () => {
    let content = `🧳 ${tripName}\n`;
    content += `📅 ${tripDays.length}-day itinerary\n`;
    content += `📍 Destinations: ${destinations.join(', ')}\n\n`;

    tripDays.forEach(day => {
      content += `=== DAY ${day} ===\n`;
      const dayActivities = activities[day] || [];
      
      dayActivities.forEach(activity => {
        content += `🕐 ${activity.time} - ${activity.name}\n`;
        content += `   📂 ${activity.category} | ⏱️ ${activity.duration}\n`;
        content += `   📍 ${activity.destination}\n\n`;
      });
    });

    content += `\n✨ Generated by TravelPlan - ${new Date().toLocaleDateString()}\n`;
    return content;
  };

  const generateICSContent = () => {
    let ics = 'BEGIN:VCALENDAR\n';
    ics += 'VERSION:2.0\n';
    ics += 'PRODID:-//TravelPlan//Trip Itinerary//EN\n';

    const baseDate = new Date();
    tripDays.forEach(day => {
      const dayActivities = activities[day] || [];
      dayActivities.forEach(activity => {
        const activityDate = new Date(baseDate);
        activityDate.setDate(baseDate.getDate() + day - 1);
        
        const [time, period] = activity.time.split(' ');
        const [hours, minutes] = time.split(':');
        let hour24 = parseInt(hours);
        if (period === 'PM' && hour24 !== 12) hour24 += 12;
        if (period === 'AM' && hour24 === 12) hour24 = 0;
        
        activityDate.setHours(hour24, parseInt(minutes || '0'));
        
        const startTime = activityDate.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
        
        ics += 'BEGIN:VEVENT\n';
        ics += `UID:${activity.id}@travelplan.com\n`;
        ics += `DTSTART:${startTime}\n`;
        ics += `SUMMARY:${activity.name}\n`;
        ics += `DESCRIPTION:${activity.category} - ${activity.duration}\\n${activity.destination}\n`;
        ics += `LOCATION:${activity.destination}\n`;
        ics += 'END:VEVENT\n';
      });
    });

    ics += 'END:VCALENDAR\n';
    return ics;
  };

  return (
    <Card className="p-4">
      <h4 className="font-semibold text-gray-800 mb-4 flex items-center gap-2">
        <Download className="h-4 w-4" />
        Export Options
      </h4>
      
      <div className="space-y-3">
        <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
          <Button 
            variant="outline" 
            className="w-full justify-start gap-2"
            onClick={exportToPDF}
          >
            <FileText className="h-4 w-4" />
            Export as Text File
          </Button>
        </motion.div>
        
        <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
          <Button 
            variant="outline" 
            className="w-full justify-start gap-2"
            onClick={exportToCalendar}
          >
            <CalendarIcon className="h-4 w-4" />
            Add to Calendar (.ics)
          </Button>
        </motion.div>
      </div>
      
      <p className="text-xs text-gray-500 mt-3">
        💡 Calendar export will create events for each activity with times and locations
      </p>
    </Card>
  );
};

export default TripExport;
